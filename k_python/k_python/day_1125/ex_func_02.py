# 복잡한 함수 => 활용도 높고 많이 사용됨
#-------------------------------------------
# 숫자 2개 더하는 함수-----------------------
def addTwo(n1,n2):
    return n1+n2
# 숫자 5개 더하는 함수-----------------------
def addFive(n1,n2,n3,n4,n5):
    return n1+n2+n3+n4+n5
#--------------------------------------------------
# 매개변수의 수가 인자의 수를 유동적으로 처리하는 함수
# => 가변인자 함수
# => 매개변수의 형태 : *변수명
# => 매개변수에 전달되는 인자의 갯수 : 0개 ~ n개
#---------------------------------------------------
print()
print(10)
print(1,4,2,7,3,9)

# --------------------------------------------------
# 기능 : 입력된 데이터를 모두 더하는 기능
# 함수명: addData
# 매개변수:*datas
# 반환값: 덧셈 결과
#---------------------------------------------------
def addData(*datas):
    #print(type(datas),len(datas))
    if len(datas)>0:
        total='' if isinstance(datas[0],str) else 0 # => True) 초기값을 빈공간 <- if 첫번째 data가 문자라면 -> False) 초기값을 0
    for data in datas:
        total +=data                                 # =>   '' +'A' = 'A'                                        0    + 1 + 3 + 5  
    return total                                     # =>    0 +'A' = 에러!!

print(addData(1.0,3.21))
print(addData(1,3,5))
print(addData(True, True))
print(addData(True, True, False, False, True)) # => 1 + 1 + 0 + 0 + 1
print(addData('A'))
print(addData('A','BC','Good'))

# print(isinstance(5, int)) => True
# print(isinstance('5', str))

#-----------------------------------------------------------
#기능: 입력된 숫자를 계산해주는 기능
#함수명: calcNum
#매개변수: *nums : 가변인자 숫자
#           how  : 계산방법 + , - , *
#반환값: 계산결과
#-----------------------------------------------------------
def calcNum(how, *nums): # how를 앞에 적어야 *nums와 구분 가능!!
    if how=='+':
        print("덧셈")
    elif how=='-':
        print("뺼셈")
    elif how=='*':
        print('곱셈')
    else:
        print('지원하지 않는 계산입니다.')
#함수 호출---------------------------------------------------
# calcNum('+',10,20)
# calcNum('-')

#-----------------------------------------------------------
#기능    : 입력된 숫자를 계산해주는 기능
#함수명  : calc
#매개변수: *nums : 가변인자 숫자
#           how  : 계산방법 +(기본값 설정) , - , *
#반환값: 계산결과
#-----------------------------------------------------------
def calc(*nums,how='+'):  # how='+' 가 기본값으로 설정됨
    print(f'how=>{how},nums=>{nums}')

calc()
calc('-',1,2,3,4, how='-') # how='-'
calc(11,22,33)

#-------------------------------------------------------------------------
#기본값 매개변수
#의미: 함수 호출 시 인자를 주지않을 경우, 사용할 값을 미리 정해둔 매개변수
#형식: 매개변수=값
#-------------------------------------------------------------------------
def add(a, b=0, c=0): # 반드시 입력해야하는 a가 맨 앞에 와야함
    print(a,b,c)
    print('결과:',a+b+c)

#print(add()) => 매개변수 a는 미입력시 사용할 값이 없음, 반드시 값 지정해야함
print(add(5))
print(add(5,3))
print(add(5,3,7))
add(5,c=3) # => b=0 # 기본값 매개변수가 여러개있는 경우는 함수 호출시 매개변수명=값 지정

##-------------------------------------------------------------------------
#키워드 매개변수
#의미: 매개변수 데이터의 의미와 값을 함께 전달
#      호출 시 전달되는 인자의 갯수는 유동적 0~n개
#형식: **변수명
#--------------------------------------------------------------------------
# 기능: 개인정보를 입력받아 저장하는 함수
# 함수명: saveInfo
# 매개변수: 사람마다 다름 => 데이터 종류 다름, 갯수 다름
#          가변, 데이터의미=값 **infos
# 반환값: 저장된 데이터
#--------------------------------------------------------------------------
def saveInfo(**infos):
    print(type(infos), len(infos), infos)
    for k,v in infos.items():
        print(f'{k}-{v}')

    for key in infos.keys():
        print(f'{key}=>{infos.get(key)}')


#키워드 파라미터 함수 호툴 방법----------------------------------------------
#함수명(변수명1=값,......, 변수명n=값)
saveInfo(name='Hong')
saveInfo()
saveInfo(age=12,phone='010-1234-4567',job='학생',loc="대구")


#반환값을 여러개 돌려주는 함수
#---------------------------------------------------
#기능: 4칙연산 수행후 결과를 반환하는 함수
#함수명: fourCalc
#매개변수: num1,num2
#반환값: 덧셈, 뺄셈, 곱셈, 나눗셈
#----------------------------------------------------
def fourCalc(num1,num2):
    addvalue=num1+num2
    subvalue=num1-num2
    mulvalue=num1*num2
    divvalue=num1/num2 if num2>0 else 0

    return addvalue, subvalue, mulvalue, divvalue

print(fourCalc(1,2))

